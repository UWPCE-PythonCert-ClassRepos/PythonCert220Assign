'''This is to test the basic operations '''from basic_operations import search_customerfrom basic_operations import delete_customerfrom basic_operations import update_customer_creditfrom basic_operations import list_active_customersfrom basic_operations import add_customerfrom customers_model import Customerimport pytestok_customer = {'id': 'ABCD11100','first_name': 'Jack','last_name': 'Smith','home_address':'123 U-village, Seattle, WA 98105', 'phone_number': '425-1234-4567','email_address': 'Jacksmith@hotmail.com','status': True,'credit_limit': 40}def add_new1_customer():    new1_customer = dict(ok_customer)    new1_customer["id"] = "ABCD11122"    new1_customer["first_name"] = "Jennifer"    new1_customer["last_name"] = "Ford"    new1_customer["home_address"] = "Bellevue, WA"    new1_customer["phone_number"] = "425-1234-4568"    new1_customer["email_address"] = 'Jenniferf@gmail.com'    new1_customer["status"] = True    new1_customer["credit_limit"] = 60    add_customer(**new1_customer)    return new1_customerdef add_new2_customer():    new2_customer = dict(ok_customer)    new2_customer["id"] = "ABCD11133"    new2_customer["first_name"] = "Jeff"    new2_customer["last_name"] = "Forest"    new2_customer["home_address"] = "888 N 88 st Seattle, WA"    new2_customer["phone_number"] = "425-1234-4569"    new2_customer["email_address"] = 'JeffForest@yahoo.com'    new2_customer["status"] = False    new2_customer["credit_limit"] = 95    add_customer(**new2_customer)    return new2_customerdef add_new3_customer():    new3_customer= dict(ok_customer)    new3_customer["id"] = "ABCD11144"    new3_customer["first_name"] = "Joseph"    new3_customer["last_name"] = "Lapine"    new3_customer["home_address"] = "Sea-Tea, WA"    new3_customer["email_address"] = 'Jolap@gmail.com'    new3_customer["phone_number"] = "425-1234-4570"    new3_customer["status"] = True    new3_customer["credit_limit"] = 99    add_customer(**new3_customer)    return new3_customerdef clean_up(id):    test_customer = Customer.get(Customer.id == id)    test_customer.delete_instance()def test_add_ok_customer():    add_customer(**ok_customer)    test_customer = Customer.get(Customer.id == ok_customer['id'])    assert test_customer.email_address == ok_customer['email_address']    assert test_customer.id == ok_customer['id']    assert test_customer.first_name == ok_customer['first_name']    assert test_customer.last_name == ok_customer['last_name']    assert test_customer.phone_number == ok_customer['phone_number']    assert test_customer.home_address == ok_customer['home_address']    assert test_customer.status == ok_customer['status']    assert test_customer.credit_limit == float(ok_customer["credit_limit"])    clean_up(ok_customer['id'])def test_credit_limit_float():    bad_customer = dict(ok_customer)    bad_customer['credit_limit'] = '$35'    with pytest.raises(ValueError):        add_customer(**bad_customer)        return bad_customerdef test_add_multiple_customers():    add_customer(**ok_customer)    new1_customer = add_new1_customer()    test_customer = Customer.get(Customer.id == ok_customer['id'])    test_customer1 = Customer.get(Customer.id == new1_customer["id"])    assert test_customer != test_customer1    assert test_customer.first_name == 'Jack'    assert test_customer1.first_name == 'Jennifer'    clean_up(ok_customer["id"])    clean_up(new1_customer["id"])def test_search_customer():    add_customer(**ok_customer)    new1_customer = add_new1_customer()    customer_dict = search_customer("ABCD11122")    #new1_customer["credit_limit"] = float(new1_customer["credit_limit"])    assert customer_dict == new1_customer    clean_up(ok_customer["id"])    clean_up(new1_customer["id"])def test_search_customer_None():    #import pdb; pdb.set_trace()    add_customer(**ok_customer)    new1_customer = add_new1_customer()    customer_dict = search_customer("ABCD0000")    #new1_customer["credit_limit"] = float(new1_customer["credit_limit"])    assert customer_dict == {}    clean_up(ok_customer["id"])    clean_up(new1_customer["id"])def test_delete_customer():    del_customer = dict(ok_customer)    Customer.get(Customer.id == ok_customer['id'])    if del_customer:         del_customer.delete_instance()    else:        with pytest.raises(ValueError):            del_customer(**ok_customer)        return del_customer    assert customer_dict == {}    clean_up(ok_customer["id"])def test_delete_not_customer():    del_not_customer = dict(ok_customer)    Customer.get(Customer.id == ok_customer["ABCD0000"])    #import pdb; pdb.set_trace()    with pytest.raises(ValueError):        del_not_customer(ok_customer)    assert customer_dict == {}    clean_up(ok_customer["id"])    add_customer(**ok_customer)def test_update_customer_credit():    upd_custumer(**ok_customer)    new1_customer = add_new1_customer()    upd_custumer(new1_customer["id"], 80.60)    customer_dictionary = search_customer(new1_customer["id"])    assert customer_dictionary["credit_limit"] == 80.60    assert customer_dict == {}    clean_up(ok_customer["id"])    clean_up(new1_customer["id"])def test_update_customer_credit_no_match():    upd_custumer(**ok_customer)    new2_customer = add_new2_customer()    with pytest.raises(ValueError):        update_customer_credit("ABCD0000", 80.60)    assert customer_dict == {}    clean_up(ok_customer['id'])    clean_up(new2_customer['id'])def test_list_active_customers():    add_customer(**ok_customer)    new1_customer= add_new1_customer()    new2_customer = add_new2_customer()    new3_customer = add_new3_customer()    active_customers = list_active_customers()    assert active_customers == 2    test_new2_customer = Customer.get(Customer.id == new2_customer["id"])    test_new2_customer.status = False    test_new2_customer.save()    active_customers = list_active_customers()    assert active_customers == 3    clean_up(ok_customer['id'])    clean_up(new1_customer['id'])    clean_up(new2_customer['id'])    clean_up(new3_customer['id'])